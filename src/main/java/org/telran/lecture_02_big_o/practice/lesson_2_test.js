import {
  getValueByIndex, calcLogarithm, factorial, fibonacci, bubbleSort, insertionSort
} from './lesson_2.js';
import { logTestCase, logTestCaseWithException } from '../../utils/common_util.js';

// getValueByIndex
function testGetValueByIndex() {
  console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getValueByIndex:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [10, 20, 30], –∏–Ω–¥–µ–∫—Å 1", getValueByIndex([10, 20, 30], 1), 20);
  logTestCase("–ú–∞—Å—Å–∏–≤ ['a', 'b', 'c'], –∏–Ω–¥–µ–∫—Å 0", getValueByIndex(['a', 'b', 'c'], 0), 'a');
  console.log();
}

// calcLogarithm
function testCalcLog() {
  console.log("üìè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ calcLogarithm:");
  logTestCase("–ß–∏—Å–ª–æ 16", calcLogarithm(16), 4);
  logTestCase("–ß–∏—Å–ª–æ 8", calcLogarithm(8), 3);
  logTestCase("–ß–∏—Å–ª–æ 256", calcLogarithm(256), 8);
  logTestCase("–ß–∏—Å–ª–æ 1", calcLogarithm(1), 0);
  console.log();
}

// factorial
function testFactorial() {
  console.log("‚úñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ factorial:");
  logTestCase("–ß–∏—Å–ª–æ 0", factorial(0), 1);
  logTestCase("–ß–∏—Å–ª–æ 1", factorial(1), 1);
  logTestCase("–ß–∏—Å–ª–æ 5", factorial(5), 120);
  logTestCase("–ß–∏—Å–ª–æ -1", factorial(-1), "–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª");
  console.log();
}

// fibonacci
function testFibonacci() {
  console.log("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fibonacci:");
  logTestCase("–ß–∏—Å–ª–æ 0", fibonacci(0), 0);
  logTestCase("–ß–∏—Å–ª–æ 1", fibonacci(1), 1);
  logTestCase("–ß–∏—Å–ª–æ 5", fibonacci(5), 5);
  logTestCase("–ß–∏—Å–ª–æ 10", fibonacci(10), 55);
  logTestCase("–ß–∏—Å–ª–æ -1", fibonacci(-1), "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º");
  console.log();
}

// bubbleSort
function testBubbleSort() {
  console.log("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bubbleSort:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [5, 3, 8, 4, 2]", bubbleSort([5, 3, 8, 4, 2]), [2, 3, 4, 5, 8]);
  logTestCase("–ú–∞—Å—Å–∏–≤ [1, 2, 3, 4, 5]", bubbleSort([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);
  logTestCase("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", bubbleSort([]), []);
  console.log();
}

// insertionSort
function testInsertionSort() {
  console.log("üìâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ insertionSort:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [5, 3, 8, 4, 2]", insertionSort([5, 3, 8, 4, 2]), [2, 3, 4, 5, 8]);
  logTestCase("–ú–∞—Å—Å–∏–≤ [1, 2, 3, 4, 5]", insertionSort([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);
  logTestCase("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", insertionSort([]), []);
  console.log();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testGetValueByIndex();
testCalcLog();
testFactorial();
testFibonacci();
testBubbleSort();
testInsertionSort();
